{"map":"{\"version\":3,\"sources\":[\"/Users/reizelyase/Documents/Projects/react-redux-typescript/src/reducers/index.ts\"],\"names\":[\"state_1\",\"__webpack_require__\",\"ActionTypes\",\"exports\",\"default\",\"state\",\"initialState\",\"action\",\"type\",\"FETCH_RESULTS\",\"Object\",\"assign\",\"fetching\",\"FETCH_RESULTS_SUCCESS\",\"fetched\",\"results\",\"FETCH_RESULTS_ERROR\",\"error\"],\"mappings\":\"sGACA,MAAAA,EAAAC,EAAA,KACAC,EAAAD,EAAA,KA6BAE,EAAAC,QA3BgB,CAACC,EAAeL,EAAAM,aAAcC,KAC5C,OAAQA,EAAOC,MACb,KAAKN,EAAYO,cACf,OAAAC,OAAAC,OAAA,GACKN,EAAK,CACRO,UAAU,IAEd,KAAKV,EAAYW,sBACf,OAAAH,OAAAC,OAAA,GACKN,EAAK,CACRO,UAAU,EACVE,SAAS,EACTC,QAASR,EAAOQ,UAEpB,KAAKb,EAAYc,oBACf,OAAAN,OAAAC,OAAA,GACKN,EAAK,CACRO,UAAU,EACVE,SAAS,EACTC,QAAS,GACTE,MAAOV,EAAOU,QAElB,QACE,OAAOZ\",\"sourcesContent\":[\"import { combineReducers } from 'redux'\\nimport { initialState, State } from '../state'\\nimport * as ActionTypes from '../action/types'\\n\\nconst reducer = (state: State = initialState, action: any) => {\\n  switch (action.type) {\\n    case ActionTypes.FETCH_RESULTS:\\n      return {\\n        ...state,\\n        fetching: true\\n      }\\n    case ActionTypes.FETCH_RESULTS_SUCCESS:\\n      return {\\n        ...state,\\n        fetching: false,\\n        fetched: true,\\n        results: action.results\\n      }\\n    case ActionTypes.FETCH_RESULTS_ERROR:\\n      return {\\n        ...state,\\n        fetching: false,\\n        fetched: false,\\n        results: [],\\n        error: action.error\\n      }\\n    default:\\n      return state\\n  }\\n}\\n\\nexport default reducer\\n\"]}","code":"webpackHotUpdate(0,{252:function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const s=r(160),c=r(121);t.default=(e=s.initialState,t)=>{switch(t.type){case c.FETCH_RESULTS:return Object.assign({},e,{fetching:!0});case c.FETCH_RESULTS_SUCCESS:return Object.assign({},e,{fetching:!1,fetched:!0,results:t.results});case c.FETCH_RESULTS_ERROR:return Object.assign({},e,{fetching:!1,fetched:!1,results:[],error:t.error});default:return e}}}});","extractedComments":[]}